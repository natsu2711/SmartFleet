// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: proto/telemetry.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TelemetryServiceClient is the client API for TelemetryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TelemetryServiceClient interface {
	// 客户端以流的形式发送遥测数据包，服务器以流的形式返回确认信息。
	// 这种双向流模式非常适合持续的数据上报。
	StreamTelemetryData(ctx context.Context, opts ...grpc.CallOption) (TelemetryService_StreamTelemetryDataClient, error)
}

type telemetryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTelemetryServiceClient(cc grpc.ClientConnInterface) TelemetryServiceClient {
	return &telemetryServiceClient{cc}
}

func (c *telemetryServiceClient) StreamTelemetryData(ctx context.Context, opts ...grpc.CallOption) (TelemetryService_StreamTelemetryDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[0], "/telemetry.TelemetryService/StreamTelemetryData", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceStreamTelemetryDataClient{stream}
	return x, nil
}

type TelemetryService_StreamTelemetryDataClient interface {
	Send(*TelemetryPacket) error
	Recv() (*Ack, error)
	grpc.ClientStream
}

type telemetryServiceStreamTelemetryDataClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceStreamTelemetryDataClient) Send(m *TelemetryPacket) error {
	return x.ClientStream.SendMsg(m)
}

func (x *telemetryServiceStreamTelemetryDataClient) Recv() (*Ack, error) {
	m := new(Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TelemetryServiceServer is the server API for TelemetryService service.
// All implementations must embed UnimplementedTelemetryServiceServer
// for forward compatibility
type TelemetryServiceServer interface {
	// 客户端以流的形式发送遥测数据包，服务器以流的形式返回确认信息。
	// 这种双向流模式非常适合持续的数据上报。
	StreamTelemetryData(TelemetryService_StreamTelemetryDataServer) error
	mustEmbedUnimplementedTelemetryServiceServer()
}

// UnimplementedTelemetryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTelemetryServiceServer struct {
}

func (UnimplementedTelemetryServiceServer) StreamTelemetryData(TelemetryService_StreamTelemetryDataServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTelemetryData not implemented")
}
func (UnimplementedTelemetryServiceServer) mustEmbedUnimplementedTelemetryServiceServer() {}

// UnsafeTelemetryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TelemetryServiceServer will
// result in compilation errors.
type UnsafeTelemetryServiceServer interface {
	mustEmbedUnimplementedTelemetryServiceServer()
}

func RegisterTelemetryServiceServer(s grpc.ServiceRegistrar, srv TelemetryServiceServer) {
	s.RegisterService(&TelemetryService_ServiceDesc, srv)
}

func _TelemetryService_StreamTelemetryData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TelemetryServiceServer).StreamTelemetryData(&telemetryServiceStreamTelemetryDataServer{stream})
}

type TelemetryService_StreamTelemetryDataServer interface {
	Send(*Ack) error
	Recv() (*TelemetryPacket, error)
	grpc.ServerStream
}

type telemetryServiceStreamTelemetryDataServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceStreamTelemetryDataServer) Send(m *Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *telemetryServiceStreamTelemetryDataServer) Recv() (*TelemetryPacket, error) {
	m := new(TelemetryPacket)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TelemetryService_ServiceDesc is the grpc.ServiceDesc for TelemetryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TelemetryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "telemetry.TelemetryService",
	HandlerType: (*TelemetryServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTelemetryData",
			Handler:       _TelemetryService_StreamTelemetryData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/telemetry.proto",
}
